name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ===== LINTING Y FORMATTING =====
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run linting
      run: |
        flake8 app/ tests/ scripts/ config/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ scripts/ config/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting
      run: |
        black --check --diff app/ tests/ scripts/ config/
        isort --check-only --diff app/ tests/ scripts/ config/

  # ===== TESTING =====
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Run tests
      env:
        FLASK_ENV: testing
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ===== SECURITY SCANNING =====
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit Security Linter
      run: bandit -r app/ config/ -f json -o bandit-report.json || true

    - name: Run Safety Check
      run: safety check --output json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v5
      with:
        name: security-reports
        path: |
          bandit-report.json

  # ===== DOCKER BUILD =====
  docker:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile
        push: false
        tags: samms-fo:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm samms-fo:latest python -c "import app; print('Docker build successful')"

  # ===== DEPLOYMENT (STAGING) =====
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment"
        # AquÃ­ irÃ­an los comandos de deployment a staging
        # Por ejemplo: kubectl, docker-compose, etc.

  # ===== DEPLOYMENT (PRODUCTION) =====
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸŽ¯ Deploying to production environment"
        # AquÃ­ irÃ­an los comandos de deployment a producciÃ³n